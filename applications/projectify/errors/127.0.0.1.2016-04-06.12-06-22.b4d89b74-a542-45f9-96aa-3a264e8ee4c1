(dp1
S'output'
p2
S"<type 'exceptions.TypeError'> 'NoneType' object does not support item assignment"
p3
sS'layer'
p4
S'/home/aman/web2py_mint/applications/projectify/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n#########################################################################\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    response.flash = T("Welcome to projectify!")\n    return dict(message=T(\'Welcome to web2py!\'))\nimport datetime\nnow=datetime.datetime.now()\n@auth.requires_login()\ndef upload():\n\tupform=SQLFORM(db.project)\n#\tform1=SQLFORM(db.cat)\n\t#form2=SQLFORM(db.subcat)\n\tif upform.process().accepted:\n\t\tredirect(URL(\'category()\'))\n\t\tcur=upform.vars.id\n\t\trow = db(db.project.id==cur).select().first()\n\t        row.update_record(author_name=auth.user.id)\n\t        row.update_record(time_of_upload=now)\n\t        response.flash = "1 record inserted"\n\telif upform.errors:\n\t        response.flash = "Errors"\n\telse:\n\t        response.flash = "Please fill the form"\n\t\t\t\t\t\t\t\t\t\n\treturn dict(upform=upform)\ndef category():\n\tform=SQLFORM(db.subcat)\n\tif form.process().accepted:\n\t\tresponse.flash = "categorised"\n\t\tredirect(URL(\'projects\'))\n\telif form.errors:\n\t\tresponse.flash="Errors"\n\telse:\n\t\tresponse.flash="Please fill the form"\n\treturn dict(form=form)\ndef projects():\n\tif len(request.args):\n\t\tprint "if"\n\t\tpage=int(request.args[0])\n\telse: \n\t\tpage=0\n\titems_per_page=5\n\tlimitby=(page*items_per_page,(page+1)*items_per_page+1)\n\trows=db().select(db.project.ALL, limitby=limitby, orderby=~db.project.time_of_upload)\n\treturn dict(rows=rows,page=page,items_per_page=items_per_page)\ndef show():\n\trec = db.project(request.args(0,cast=int))\n        i=request.args(0,cast=int)\n        recid=request.args(0,cast=int) or redirect(URL(\'projects\'))\n\tprint i\n        like_str=str(db(db.project.id==request.args[0]).select(db.project.likes))\n        vot=(like_str.split())\n        print vot\n        votes=len(vot)\n        if vot[1]==\'""\':\n            votes=1\n        form = FORM(BUTTON(\'Like / Unlike\',_type=\'submit\'),\n                    _action=URL(\'default\',\'like\',args=recid))\n\tdb.post1.project_id.default=rec.id\n\tdb.post1.project_id.writable=db.post1.project_id.readable=False\n\tdb.post1.author.writable=db.post1.author.readable=False\n\tform1=SQLFORM(db.post1)\n\tif form1.process().accepted:\n\t        cur=form1.vars.id\n\t        q=str(db(db.auth_user.id==auth.user.id).select(db.auth_user.first_name))\n\t        a=q.split()\n\t        row = db(db.post1.id==cur).select().first()\n\t        row.update_record(author=a[1])  \n\t        response.flash = \'your comment is posted\'\n\tcomments = db(db.post1.project_id==rec.id).select()\n\treturn dict(rec=rec,recid=recid,form=form, votes=votes,comments=comments,form1=form1)\n\t#return dict(rec=rec,recid=recid,)\ndef like():\n\tfrom re import match\n\trecid=request.args[0]\n\tlike_str=str(db(db.project.id==request.args[0]).select(db.project.likes))\n\tlike_list=[x for x in like_str.split() if match(\'^[0-9]*$\',x)]\n\tif str(auth.user.id) not in like_list:\n\t\tlike_list.append(str(auth.user.id))\n\t\tdb(db.project.id==request.args[0]).update(likes=(\' \').join(like_list))\n\telse:\n\t        like_list.remove(str(auth.user.id))\n\t        db(db.project.id==request.args[0]).update(likes=(\' \').join(like_list))\n\treturn dict(l=like_list,recid=recid)\ndef myprofile():\n\treturn dict(form=auth.profile())\ndef searchbytitle():\n\tform=FORM(INPUT(_type="string",_name="title",_placeholder="a piece of string in title",requires=IS_NOT_EMPTY()))\n#\tform.element(\'textarea[name=title]\')[\'_style\']=\'width:500px;height:100px;\'\n\tans=[];\n\tif form.process().accepted:\n\t\tresponse.flash="Required search is applied"\n\telif form.errors:\n\t\tresponse.flash="Please fill the form COMPLETELY"\n\telse:\n\t\tresponse.flash="Fill this form completely to search"\n\tif len(request.vars) != 0:\n\t\ts=request.vars["title"]\n\t\tans=db(db.project.project_title.like("%"+s+"%")).select()\n\treturn dict(ans=ans,form=form)\ndef search():\n\ta=10\n\treturn dict(a=a);\n\ndef searchbyperson():\n\tform=FORM(INPUT(_type="textarea",_name="person",_placeholder="a piece of string in name of person",requires=IS_NOT_EMPTY()))\n\tans=[];\n\tform.element(\'textarea[name=person]\')[\'_style\']=\'width:500px;height:100px;\'\n\tif form.process().accepted:\n\t\tresponse.flash="Required search is applied"\n\telif form.errors:\n\t\tresponse.flash="Please fill the form COMPLETELY"\n\telse:\n\t\tresponse.flash="Fill this form completely to search"\n\tif len(request.vars) != 0:\n\t\ts=request.vars["person"]\n\t\tans=db(db.project.author_name.like("%"+s+"%")).select()\n\treturn locals()\n\t\ndef searchbycat():\n\tform=FORM(INPUT(_type="string",_name="category",requires=IS_IN_SET([\'Programming language\',\'Mathematics\',\'Web development\',\'App development\'])))\n\tans=[];\n\tif form.process().accepted:\n\t\tresponse.flash="Required search is applied"\n\telif form.errors:\n\t\tresponse.flash="Please fill the form COMPLETELY"\n\telse:\n\t\tresponse.flash="Fill this form completely to search"\n\tif len(request.vars) != 0:\n\t\ts=request.vars["category"]\n\t\tans=db(db.project.project_title.like("%"+s+"%")).select()\n\treturn locals()\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n\nresponse._vars=response._caller(searchbyperson)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/aman/web2py_mint/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/aman/web2py_mint/applications/projectify/controllers/default.py", line 188, in <module>\n  File "/home/aman/web2py_mint/gluon/globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/aman/web2py_mint/applications/projectify/controllers/default.py", line 123, in searchbyperson\n    form.element(\'textarea[name=person]\')[\'_style\']=\'width:500px;height:100px;\'\nTypeError: \'NoneType\' object does not support item assignment\n'
p11
s.