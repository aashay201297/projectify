(dp1
S'output'
p2
S"<type 'exceptions.AttributeError'> 'DAL' object has no attribute 'select'"
p3
sS'layer'
p4
S'/home/aman/web2py_mint/applications/projectify/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n#########################################################################\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    response.flash = T("Welcome to projectify!")\n    return dict(message=T(\'Welcome to web2py!\'))\n@auth.requires_login()\ndef allprofiles():\n\tusers=db().select(db.auth_user.ALL)\n\treturn dict(users=users)\ndef profile():\n        rec = db.auth_user(request.args(0,cast=int))\n        i=request.args(0,cast=int)\n        recid=request.args(0,cast=int) or redirect(URL(\'allprofiles\'))\n        pubpro=db(db.project.author_name==rec.id).select()\n        return dict(i=i,rec=rec,recid=recid,pubpro=pubpro)\n\n\n@auth.requires_login()\ndef upload():\n\timport datetime\n\tnow=datetime.datetime.now()\n\tdb.project.author_name.readable=db.project.author_name.writable= False\n\tupform=SQLFORM(db.project)\n#\tform1=SQLFORM(db.cat)\n\t#form2=SQLFORM(db.subcat)\n\tif upform.process().accepted:\n\t\tcur=upform.vars.id\n\t\trow = db(db.project.id==cur).select().first()\n        \trow.update_record(author_name=auth.user.id)\n        \trow.update_record(time_of_upload=now)\n        \tdb.conti.insert(contributor=auth.user.id,project_id=cur)\n        \tresponse.flash = "1 record inserted"\n        \tredirect(URL(\'category()\',args=cur))\n    \telif upform.errors:\n        \tresponse.flash = "Errors"\n\telse:\n        \tresponse.flash = "Please fill the form"\n\treturn dict(upform=upform)\n@auth.requires_login()\ndef category():\n\tform=SQLFORM(db.subcat)\n\tcur=request.args[1]\n\tprint \'cur=\',cur[1]\n\tif form.process().accepted:\n\t\tcurcat=int(form.vars.id)\n\t\tcatrow=db(db.subcat.id==curcat).select().first()\n\t\trow= db(db.project.id==cur).select().first()\n                x=db(db.cat.id==catrow.category).select().first()\n                print \'row=\',row\n                row.update_record(category=x.category)\n\t\t#print "catrow=",catrow.category\n\t\t#row.update_record(category=catrow.category)\n\t\t#print row\n\t\tresponse.flash = "categorised"\n\t\tredirect(URL(\'projects\'))\n\telif form.errors:\n\t\tresponse.flash="Errors"\n\telse:\n\t\tresponse.flash="Please fill the form"\n\treturn dict(form=form)\n@auth.requires_login()\ndef projects():\n\tif len(request.args):\n\t\tprint "if"\n\t\tpage=int(request.args[0])\n\telse: \n\t\tpage=0\n\titems_per_page=5\n\tlimitby=(page*items_per_page,(page+1)*items_per_page+1)\n\trows=db().select(db.project.ALL, limitby=limitby, orderby=~db.project.time_of_upload)\n\treturn dict(rows=rows,page=page,items_per_page=items_per_page)\n    \n@auth.requires_login()\ndef show():\n\trec = db.project(request.args(0,cast=int))\n        i=request.args(0,cast=int)\n        recid=request.args(0,cast=int) or redirect(URL(\'projects\'))\n        cons=db(db.conti.project_id==recid).select()\n        x=0\n        for con in cons:\n                if auth.user.id==con.contributor:\n                        x=1\n                        break\n        if x==1:\n                like_str=str(db(db.project.id==request.args[0]).select(db.project.likes))\n                vot=(like_str.split())\n                votes=len(vot)\n                if vot[1]==\'""\':\n                    votes=1\n                form = FORM(BUTTON(\'Like / Unlike\',_type=\'submit\'),\n                            _action=URL(\'default\',\'like\',args=recid))\n                db.post1.project_id.default=rec.id\n                db.post1.project_id.writable=db.post1.project_id.readable=False\n                db.post1.author.writable=db.post1.author.readable=False\n                form1=SQLFORM(db.post1)\n                if form1.process().accepted:\n                        cur=form1.vars.id\n                        q=str(db(db.auth_user.id==auth.user.id).select(db.auth_user.first_name))\n                        a=q.split()\n                        row = db(db.post1.id==cur).select().first()\n                        row.update_record(author=a[1])\n                        response.flash = \'your comment is posted\'\n                comments = db(db.post1.project_id==rec.id).select()\n                return dict(rec=rec,recid=recid,form=form, votes=votes,comments=comments,form1=form1,x=1)\n        else:\n                return dict(x=0)\ndef likes():\n\tvar = db.select(db.project.ALL, orderby=db.project.likes)\n\treturn dict(var=var)\ndef add_contributor():\n        db.conti.project_id.writable=db.conti.project_id.readable=False\n        addform=SQLFORM(db.conti)\n        recid=request.args[0]\n        if addform.process().accepted:\n                cur=addform.vars.id\n                row = db(db.conti.id==cur).select().first()\n                row.update_record(project_id=recid)\n                response.flash=\'contributor added\'\n                redirect(URL(\'show\',args=recid))\n        return dict(addform=addform)\n        #return dict(rec=rec,recid=recid,)\n\n\n\n@auth.requires_login()\ndef like():\n\tfrom re import match\n\trecid=request.args[0]\n\tlike_str=str(db(db.project.id==request.args[0]).select(db.project.likes))\n\tlike_list=[x for x in like_str.split() if match(\'^[0-9]*$\',x)]\n\tif str(auth.user.id) not in like_list:\n\t\tlike_list.append(str(auth.user.id))\n\t\tdb(db.project.id==request.args[0]).update(likes=(\' \').join(like_list))\n\telse:\n\t        like_list.remove(str(auth.user.id))\n\t        db(db.project.id==request.args[0]).update(likes=(\' \').join(like_list))\n\treturn dict(l=like_list,recid=recid)\n@auth.requires_login()\ndef myprofile():\n#        rec = db.auth_user(request.args(0,cast=int))\n#\tprint rec\n#        i=request.args(0,cast=int)\n#        recid=request.args(0,cast=int) or redirect(URL(\'allprofiles\'))\n#\tpubpro=db(db.project.author_name==auth.user.id).select()\n\tredirect(URL(\'profile\',args=auth.user.id))\n\treturn dict(pubpro=pubpro)\n@auth.requires_login()\ndef searchbytitle():\n\tform=FORM(INPUT(_type="string",_name="title",_placeholder="a piece of string in title",requires=IS_NOT_EMPTY()))\n\tans=[];\n\tif form.process().accepted:\n\t\tresponse.flash="Required search is applied"\n\telif form.errors:\n\t\tresponse.flash="Please fill the form COMPLETELY"\n\telse:\n\t\tresponse.flash="Fill this form completely to search"\n\tif len(request.vars) != 0:\n\t\ts=request.vars["title"]\n\t\tans=db(db.project.project_title.like("%"+s+"%")).select()\n\treturn dict(ans=ans,form=form)\n@auth.requires_login()\ndef search():\n\ta=10\n\treturn dict(a=a);\n\n@auth.requires_login()\ndef searchbyperson():\n\tform=FORM(INPUT(_type="string",_name="person",_placeholder="a piece of string in name of person",requires=IS_NOT_EMPTY()))\n\tans=[];\n\tif form.process().accepted:\n\t\tresponse.flash="Required search is applied"\n\telif form.errors:\n\t\tresponse.flash="Please fill the form COMPLETELY"\n\telse:\n\t\tresponse.flash="Fill this form completely to search"\n\tif len(request.vars) != 0:\n\t\ts=request.vars["person"]\n\t\tans=db(db.project.author_name.like("%"+s+"%")).select()\n\treturn locals()\n\t\n@auth.requires_login()\ndef searchbycat():\n\tform=FORM(INPUT(_type="string",_name="category",requires=IS_IN_SET([\'Programming language\',\'Mathematics\',\'Web development\',\'App development\'])))\n\tans=[];\n\tif form.process().accepted:\n\t\tresponse.flash="Required search is applied"\n\telif form.errors:\n\t\tresponse.flash="Please fill the form COMPLETELY"\n\telse:\n\t\tresponse.flash="Fill this form completely to search"\n\tif len(request.vars) != 0:\n\t\ts=request.vars["category"]\n\t\tans=db(db.project.category.like("%"+s+"%")).select()\n\treturn locals()\ndef show_cat():\n\n    query=db.project.category.like("%"+s+"%")\n    users = db(query).select(orderby=db.project.category)\n    links = [A(p.project_title, _href=URL(\'show\',args=p.id)) for p in users]\n    return DIV(*[DIV(k,  _onmouseover="this.style.backgroundColor=\'yellow\'", _onmouseout="this.style.backgroundColor=\'white\'")for k in links])\n\n    \ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users\n    """\n    return dict(form=auth())\n\ndef red():\n    s=db(db.project.id>0).select(db.project.ALL)\t\n    return locals();\ndef download_a():\n    print request.args\n    file1=request.args[0].split()\n    print "FILE==",file1\n    row = db(db.project.id==file1.id).select()\n    down =row.downloads \n    down=down+1\n    #import datetime\n    #now=datetime.datetime.now()\n    #db.d.insert(project_id="file1.id",timestamp="now",author="auth.user.id")\n    row.update_record(downloads=down)\n    redirect(URL(\'dowload\',args=row.folder))\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db) \n\ndef search2():\n    return dict(form1=FORM(INPUT(_id=\'keyword1\',_name=\'keyword1\', _onkeyup="ajax(\'callback2\', [\'keyword1\'], \'target1\');")),target_div1=DIV(_id=\'target1\'),form2=FORM(INPUT(_id=\'keyword2\',_name=\'keyword2\', _onkeyup="ajax(\'callback3\', [\'keyword2\'], \'target2\');")),target_div2=DIV(_id=\'target2\'),form3=FORM(INPUT(_id=\'keyword3\',_name=\'keyword3\', _onkeyup="ajax(\'callbackcomb\', [\'keyword3\'], \'target3\');")),target_div3=DIV(_id=\'target3\'),form4=FORM(INPUT(_id=\'keyword4\',_name=\'keyword4\', _onkeyup="ajax(\'callback4\', [\'keyword4\'], \'target4\');")),target_div4=DIV(_id=\'target4\'))\n\ndef callback2():\n    if not request.vars.keyword1: return \'\'\n    query = db.project.project_title.contains(request.vars.keyword1)\n    images = db(query).select(orderby=db.project.project_title)\n    links = [A(p.project_title, _href=URL(\'show\',args=p.id)) for p in images]\n    return DIV(*[DIV(k,  _onmouseover="this.style.backgroundColor=\'yellow\'", _onmouseout="this.style.backgroundColor=\'white\'")for k in links])\n\ndef callback3():\n    if not request.vars.keyword2: return \'\'\n    query = db.auth_user.first_name.contains(request.vars.keyword2)\n    users = db(query).select(orderby=db.auth_user.first_name)\n    links = [A(p.first_name, _href=URL(\'profile\',args=p.id)) for p in users]\n    return DIV(*[DIV(k,  _onmouseover="this.style.backgroundColor=\'yellow\'", _onmouseout="this.style.backgroundColor=\'white\'")for k in links])\ndef callback4():\n    if not request.vars.keyword4: return \'\'\n    query = db.project.category.contains(request.vars.keyword4)\n    users = db(query).select(orderby=db.project.category)\n    links = [A(p.project_title, _href=URL(\'show\',args=p.id)) for p in users]\n    return DIV(*[DIV(k,  _onmouseover="this.style.backgroundColor=\'yellow\'", _onmouseout="this.style.backgroundColor=\'white\'")for k in links])\ndef callbackcomb():\n    if not request.vars.keyword3: return \'\'\n    query1 = db.project.project_title.contains(request.vars.keyword3)\n    images = db(query1).select(orderby=db.project.project_title)\n    links1 = [A(p.project_title + " (project)", _href=URL(\'show\',args=p.id)) for p in images]\n    query = db.auth_user.first_name.contains(request.vars.keyword3)\n    users = db(query).select(orderby=db.auth_user.first_name)\n    links = [A(p.first_name+" (user)", _href=URL(\'profile\',args=p.id)) for p in users]\n    links=links+links1\n    return DIV(*[DIV(k,  _onmouseover="this.style.backgroundColor=\'yellow\'", _onmouseout="this.style.backgroundColor=\'white\'")for k in links])\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\nresponse._vars=response._caller(likes)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/aman/web2py_mint/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/aman/web2py_mint/applications/projectify/controllers/default.py", line 302, in <module>\n  File "/home/aman/web2py_mint/gluon/globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/aman/web2py_mint/applications/projectify/controllers/default.py", line 123, in likes\n    var = db.select(db.project.ALL, orderby=db.project.likes)\n  File "/home/aman/web2py_mint/gluon/packages/dal/pydal/base.py", line 921, in __getattr__\n    return BasicStorage.__getattribute__(self, key)\nAttributeError: \'DAL\' object has no attribute \'select\'\n'
p11
s.