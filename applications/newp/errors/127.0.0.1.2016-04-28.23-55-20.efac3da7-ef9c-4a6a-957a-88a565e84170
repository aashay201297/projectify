(dp1
S'output'
p2
S"<type 'exceptions.TypeError'> cannot concatenate 'str' and 'long' objects"
p3
sS'layer'
p4
S'/home/deepanshu/Documents/IT Swag/web2py/applications/newp/controllers/default.py'
p5
sS'code'
p6
S'import datetime\nimport os\nnow=datetime.datetime.now\n\n\n@auth.requires_login()\ndef index():\n    if len(request.args):\n        page=int(request.args[0])\n    else:\n        page=0\n    items_per_page=2\n    limitby=(page*items_per_page,(page+1)*items_per_page+1)\n    rows=db().select(db.image.ALL, limitby=limitby, orderby=~db.image.upload_date)\n    return dict(rows=rows, page=page, items_per_page=items_per_page)\n\n\n\ndef myprofile():\n    x=auth.user\n    if len(request.args):\n        page=int(request.args[0])\n    else:\n        page=0\n    items_per_page=2\n    limitby=(page*items_per_page,(page+1)*items_per_page+1)\n    rows=db(db.image.author_id==auth.user.id).select(db.image.ALL,limitby=limitby, orderby=~db.image.upload_date)\n    coms=db(db.post.author_id==auth.user.id).select(db.post.ALL,limitby=limitby)\n    return dict(rows=rows, page=page, items_per_page=items_per_page,x=x,coms=coms)\n\ndef showprofile():\n    auid=request.args(0,cast=int) or redirect(URL(\'index\'))\n    if auid==auth.user.id :\n        redirect(URL(\'myprofile\'))\n    x=db(db.auth_user.id==auid).select(db.auth_user.ALL)\n    rows=db(db.image.author_id==x[0].id).select(db.image.ALL,orderby=~db.image.upload_date)\n    coms=db(db.post.author_id==x[0].id).select(db.post.ALL)\n    return dict(rows=rows,x=x,coms=coms)\n\ndef upload():\n    form=SQLFORM(db.image)\n    if form.process().accepted:\n        cur=form.vars.id\n        row=db(db.image.id==cur).select().first()\n        row.update_record(author_id=auth.user.id)\n        row.update_record(upload_date=now)\n        response.flash = \'Your Image Has Been Uploaded\'\n        redirect(URL(\'addtag\',args=cur))\n    return dict(form=form)\n\ndef addtag():\n    imgid=request.args[0]\n    print "blah"\n    print str(imgid) + "kaa baat bhaiya"\n    print "helloaddtag3"\n    return dict(form=FORM(INPUT(_id=\'keyword\',_name=\'keyword\', _onkeyup="ajax(\'/newp/default/burr\', [\'keyword\',\'imgid\'], \'target\');")),target_div=DIV(_id=\'target\'))\n\ndef burr():\n    print "hellofunc3"\n    if not request.vars.keyword:\n        print "no vars"\n        return \'\'\n    query = db.tags.name.contains(request.vars.keyword)\n    tag = db(query).select(orderby=db.tags.name)\n    links = [P([p.name,p.id]) for p in tag]\n    print links[0][0] + " " + links[0][1]\n    imgid=request.vars.imgid\n    return DIV(*[DIV(k[0], _onmouseclick="ajax(\'/newp/default/uptag\',[\'k[1]\',\'imgid\'],\'target\')", _onmouseover="this.style.backgroundColor=\'yellow\'", _onmouseout="this.style.backgroundColor=\'white\'")for k in links])\n    \ndef uptag():\n    print "hellouptag"\n    # tagid=request.vars.k[1]\n    # imgid=request.vars.imgid\n    # tag=db(db.tag.id==tagid).select(db.tag.ALL)\n    # tag[0].imglist.append(imgid)\n    # img=db(db.image.id==imgid).select(db.image.ALL)\n    # img[0].taglist.append(tagid)\n    redirect(URL(\'addtag\',args=cur))\n    return dict()\n    \ndef search():\n    return dict(form=FORM(INPUT(_id=\'keyword\',_name=\'keyword\', _onkeyup="ajax(\'callback\', [\'keyword\'], \'target\');")),target_div=DIV(_id=\'target\'))\n\n\ndef callback():\n    query = db.image.title.contains(request.vars.keyword)\n    images = db(query).select(orderby=db.image.title)\n    links = [A(p.title, _href=URL(\'show\',args=p.id)) for p in images]\n    return UL(*links)\n\n\ndef search2():\n    return dict(form1=FORM(INPUT(_id=\'keyword1\',_name=\'keyword1\', _onkeyup="ajax(\'callback2\', [\'keyword1\'], \'target1\');")),target_div1=DIV(_id=\'target1\'),form2=FORM(INPUT(_id=\'keyword2\',_name=\'keyword2\', _onkeyup="ajax(\'callback3\', [\'keyword2\'], \'target2\');")),target_div2=DIV(_id=\'target2\'),form3=FORM(INPUT(_id=\'keyword3\',_name=\'keyword3\', _onkeyup="ajax(\'callbackcomb\', [\'keyword3\'], \'target3\');")),target_div3=DIV(_id=\'target3\'))\n\ndef callback2():\n    if not request.vars.keyword1: return \'\'\n    query = db.image.title.contains(request.vars.keyword1)\n    images = db(query).select(orderby=db.image.title)\n    links = [A(p.title, _href=URL(\'show\',args=p.id)) for p in images]\n    return DIV(*[DIV(k,  _onmouseover="this.style.backgroundColor=\'yellow\'", _onmouseout="this.style.backgroundColor=\'white\'")for k in links])\n\ndef callback3():\n    if not request.vars.keyword2: return \'\'\n    query = db.auth_user.username.contains(request.vars.keyword2)\n    users = db(query).select(orderby=db.auth_user.username)\n    links = [A(p.username, _href=URL(\'showprofile\',args=p.id)) for p in users]\n    return DIV(*[DIV(k,  _onmouseover="this.style.backgroundColor=\'yellow\'", _onmouseout="this.style.backgroundColor=\'white\'")for k in links])\n\ndef callbackcomb():\n    if not request.vars.keyword3: return \'\'\n    query1 = db.image.title.contains(request.vars.keyword3)\n    images = db(query1).select(orderby=db.image.title)\n    links1 = [A(p.title + " (image)", _href=URL(\'show\',args=p.id)) for p in images]\n    query = db.auth_user.username.contains(request.vars.keyword3)\n    users = db(query).select(orderby=db.auth_user.username)\n    links = [A(p.username+" (user)", _href=URL(\'showprofile\',args=p.id)) for p in users]\n    links=links+links1\n    return DIV(*[DIV(k,  _onmouseover="this.style.backgroundColor=\'yellow\'", _onmouseout="this.style.backgroundColor=\'white\'")for k in links])\n\ndef show():\n\timgid=request.args(0,cast=int) or redirect(URL(\'index\'))\n       \timage=db(db.image.id==imgid).select(db.image.ALL)\n        db.post.image_id.default = image[0].id\n        db.post.author_id.default = auth.user.id\n        form = SQLFORM(db.post)\n        like1=image[0].like1\n        like2=image[0].like2\n        like3=image[0].like3\n        like4=image[0].like4\n        like5=image[0].like5\n        totlik=like1+like2+like3+like4+like5\n        if form.process().accepted:\n            response.flash = \'your comment is posted\'\n        comments = db(db.post.image_id==imgid).select()\n\treturn dict(image=image, comments=comments,form=form,like1=like1,like2=like2,like3=like3,like4=like4,like5=like5,totlik=totlik)\n\ndef like_count():\n\timgid=request.args(0,cast=int) or redirect(URL(\'index\'))\n       \timage=db(db.image.id==imgid).select(db.image.ALL)\n        like1=image[0].like1\n        like2=image[0].like2\n        like3=image[0].like3\n        like4=image[0].like4\n        like5=image[0].like5\n        totlik=like1+like2+like3+like4+like5\n\treturn dict(like1=like1,like2=like2,like3=like3,like4=like4,like5=like5,totlik=totlik)\n\ndef like_image():\n    print "\\n\\n\\nreturning1"\n    type= request.args[1]\n    img = db.image[request.args[0]]\n    print request.args[0]\n    like = db((db.likes.created_by == auth.user.id) & (db.likes.imageid == img.id)).select().first()\n    print "returningnew"\n    if like:\n        print "if"\n        if like.score==1:\n            img.update_record(like1=img.like1-1)\n            print "if me 1st"\n            print img.like1\n        elif like.score==2:\n            img.update_record(like2=img.like2-1)\n        elif like.score==3:\n            img.update_record(like3=img.like3-1)\n        elif like.score==4:\n            img.update_record(like4=img.like4-1)\n        elif like.score==5:\n            img.update_record(like5=img.like5-1)\n            like.update_record(score=type)\n        if type==str(1):\n            img.update_record(like1=img.like1+1)\n            print "if me 1st"\n            print img.like1\n        elif type==str(2):\n            img.update_record(like2=img.like2+1)\n        elif type==str(3):\n            img.update_record(like3=img.like3+1)\n        elif type==str(4):\n            img.update_record(like4=img.like4+1)\n        elif type==str(5):\n            img.update_record(like5=img.like5+1)\n            like.update_record(score=type)\n        like.update_record(score=int(type))\n\n    else:\n        print "else"\n        print auth.user.id\n        print img.id\n        db.likes.insert(score=type,created_by=auth.user.id,imageid=img.id)\n        print type\n        if type==str(1):\n            img.update_record(like1=img.like1+1)\n            print "else wala"\n            print img.like1\n        elif type==str(2):\n            img.update_record(like2=img.like2+1)\n        elif type==str(3):\n            img.update_record(like3=img.like3+1)\n        elif type==str(4):\n            img.update_record(like4=img.like4+1)\n        elif type==str(5):\n            img.update_record(like5=img.like5+1)\n            like.update_record(score=type)\n        print "khatam ho gaya"\n    totlik=img.like1+img.like2+img.like3+img.like4+img.like5\n    img.update_record(total=totlik)\n    print totlik\n    return dict(like1=img.like1,like2=img.like2,like3=img.like3,like4=img.like4,like5=img.like5,totlik=totlik)\n\ndef delete():\n    imgid=request.args[0]\n    db(db.image.id==imgid).delete()\n    redirect(URL(\'myprofile\'))\n\ndef edit():\n    row=db.image(request.args(0,cast=int))\n    imgid=row.id\n    form=SQLFORM(db.image,row)\n    form.process(detect_record_change=True)\n    x=row.author_id\n    if x!=auth.user.id:\n        return dict(form="Not Authorised")\n    db(db.image.id==x).delete()\n    if form.accepted:\n        row.update()\n        response.flash = \'Image Updated\'\n        redirect(URL(\'show\',args=row.id))\n    elif form.errors:\n        response.flash = \'Fill the form properly\'\n    else:\n        response.flash=\'Edit the form as per your choice\'\n    return dict(form=form,imgid=imgid)\n\ndef manage():\n    grid=SQLFORM.grid(db.image,paginate=10)\n    return locals()\n\ndef user():\n    return dict(form=auth())\n\n@cache.action()\ndef download():\n    return response.download(request,db)\n\ndef call():\n    return service()\n\ndef test():\n    return "hi"\n\nresponse._vars=response._caller(burr)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/deepanshu/Documents/IT Swag/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/deepanshu/Documents/IT Swag/web2py/applications/newp/controllers/default.py", line 251, in <module>\n  File "/home/deepanshu/Documents/IT Swag/web2py/gluon/globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/deepanshu/Documents/IT Swag/web2py/applications/newp/controllers/default.py", line 66, in burr\n    print links[0][0] + " " + links[0][1]\nTypeError: cannot concatenate \'str\' and \'long\' objects\n'
p11
s.