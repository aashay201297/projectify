(dp1
S'output'
p2
S"<type 'exceptions.AttributeError'> "
p3
sS'layer'
p4
S'/home/deepanshu/Documents/IT Swag/web2py/applications/newp/controllers/default.py'
p5
sS'code'
p6
S'import datetime\n\nnow=datetime.datetime.now\n\n\n@auth.requires_login()\ndef index():\n    if len(request.args):\n        page=int(request.args[0])\n    else:\n        page=0\n    items_per_page=2\n    limitby=(page*items_per_page,(page+1)*items_per_page+1)\n    rows=db().select(db.image.ALL, limitby=limitby, orderby=~db.image.upload_date)\n    return dict(rows=rows, page=page, items_per_page=items_per_page)\n\n\n\ndef myprofile():\n    x=auth.user\n    if len(request.args):\n        page=int(request.args[0])\n    else:\n        page=0\n    items_per_page=2\n    limitby=(page*items_per_page,(page+1)*items_per_page+1)\n    rows=db(db.image.author_id==auth.user.id).select(db.image.ALL,limitby=limitby, orderby=~db.image.upload_date)\n    coms=db(db.post.author_id==auth.user.id).select(db.post.ALL,limitby=limitby)\n    return dict(rows=rows, page=page, items_per_page=items_per_page,x=x,coms=coms)\n\ndef showprofile():\n    auid=request.args(0,cast=int) or redirect(URL(\'index\'))\n    if auid==auth.user.id :\n        redirect(URL(\'myprofile\'))\n    x=db(db.auth_user.id==auid).select(db.auth_user.ALL)\n    rows=db(db.image.author_id==x[0].id).select(db.image.ALL,orderby=~db.image.upload_date)\n    coms=db(db.post.author_id==x[0].id).select(db.post.ALL)\n    return dict(rows=rows,x=x,coms=coms)\n\ndef upload():\n    form=SQLFORM(db.image)\n\n    if form.process().accepted:\n        cur=form.vars.id\n        row=db(db.image.id==cur).select().first()\n        row.update_record(author_id=auth.user.id)\n        row.update_record(upload_date=now)\n        response.flash = \'Your Image Has Been Uploaded\'\n    return dict(form=form)\n\ndef search():\n    return dict(form=FORM(INPUT(_id=\'keyword\',_name=\'keyword\', _onkeyup="ajax(\'callback\', [\'keyword\'], \'target\');")),target_div=DIV(_id=\'target\'))\n\n\ndef callback():\n    query = db.image.title.contains(request.vars.keyword)\n    images = db(query).select(orderby=db.image.title)\n    links = [A(p.title, _href=URL(\'show\',args=p.id)) for p in images]\n    return UL(*links)\n\n\ndef search2():\n    return dict()\n\ndef image_selector():\n    if not request.vars.image: \n        print "1not in "\n        return \'\'\n    images=db().select(db.image.title)\n    print images[0]\n    img_start = request.vars.image.capitalize()\n    selected = [m for m in images if m.startswith(img_start)]\n    return DIV(*[DIV(k,_onclick="jQuery(\'#image\').val(\'%s\')" % k, _onmouseover="this.style.backgroundColor=\'yellow\'", _onmouseout="this.style.backgroundColor=\'white\'"\n) for k in selected])\n\n\ndef show():\n\timgid=request.args(0,cast=int) or redirect(URL(\'index\'))\n       \timage=db(db.image.id==imgid).select(db.image.ALL)\n        db.post.image_id.default = image[0].id\n        db.post.author_id.default = auth.user.id\n        form = SQLFORM(db.post)\n        like1=image[0].like1\n        like2=image[0].like2\n        like3=image[0].like3\n        like4=image[0].like4\n        like5=image[0].like5\n        totlik=like1+like2+like3+like4+like5\n        if form.process().accepted:\n            response.flash = \'your comment is posted\'\n        comments = db(db.post.image_id==imgid).select()\n\treturn dict(image=image, comments=comments,form=form,like1=like1,like2=like2,like3=like3,like4=like4,like5=like5,totlik=totlik)\n\ndef like_count():\n\timgid=request.args(0,cast=int) or redirect(URL(\'index\'))\n       \timage=db(db.image.id==imgid).select(db.image.ALL)\n        like1=image[0].like1\n        like2=image[0].like2\n        like3=image[0].like3\n        like4=image[0].like4\n        like5=image[0].like5\n        totlik=like1+like2+like3+like4+like5\n\treturn dict(like1=like1,like2=like2,like3=like3,like4=like4,like5=like5,totlik=totlik)\n\n\n\ndef like_image():\n    print "\\n\\n\\nreturning1"\n    type= request.args[1]\n    img = db.image[request.args[0]]\n    print request.args[0]\n    like = db((db.likes.created_by == auth.user.id) & (db.likes.imageid == img.id)).select().first()\n    print "returningnew"\n    if like:\n        print "if"\n        if like.score==1:\n            img.update_record(like1=img.like1-1)\n            print "if me 1st"\n            print img.like1\n        elif like.score==2:\n            img.update_record(like2=img.like2-1)\n        elif like.score==3:\n            img.update_record(like3=img.like3-1)\n        elif like.score==4:\n            img.update_record(like4=img.like4-1)\n        elif like.score==5:\n            img.update_record(like5=img.like5-1)\n            like.update_record(score=type)\n        if type==str(1):\n            img.update_record(like1=img.like1+1)\n            print "if me 1st"\n            print img.like1\n        elif type==str(2):\n            img.update_record(like2=img.like2+1)\n        elif type==str(3):\n            img.update_record(like3=img.like3+1)\n        elif type==str(4):\n            img.update_record(like4=img.like4+1)\n        elif type==str(5):\n            img.update_record(like5=img.like5+1)\n            like.update_record(score=type)\n        like.update_record(score=int(type))\n\n    else:\n        print "else"\n        print auth.user.id\n        print img.id\n        db.likes.insert(score=type,created_by=auth.user.id,imageid=img.id)\n        print type\n        if type==str(1):\n            img.update_record(like1=img.like1+1)\n            print "else wala"\n            print img.like1\n        elif type==str(2):\n            img.update_record(like2=img.like2+1)\n        elif type==str(3):\n            img.update_record(like3=img.like3+1)\n        elif type==str(4):\n            img.update_record(like4=img.like4+1)\n        elif type==str(5):\n            img.update_record(like5=img.like5+1)\n            like.update_record(score=type)\n        print "khatam ho gaya"\n    totlik=img.like1+img.like2+img.like3+img.like4+img.like5\n    img.update_record(total=totlik)\n    print totlik\n    return dict(like1=img.like1,like2=img.like2,like3=img.like3,like4=img.like4,like5=img.like5,totlik=totlik)\n\ndef delete():\n    imgid=request.args[0]\n    db(db.image.id==imgid).delete()\n    redirect(URL(\'myprofile\'))\n\ndef edit():\n    row=db.image(request.args(0,cast=int))\n    imgid=row.id\n    form=SQLFORM(db.image,row)\n    form.process(detect_record_change=True)\n    x=row.author_id\n    if x!=auth.user.id:\n        return dict(form="Not Authorised")\n    db(db.image.id==x).delete()\n    if form.accepted:\n        row.update()\n        response.flash = \'Image Updated\'\n        redirect(URL(\'show\',args=row.id))\n    elif form.errors:\n        response.flash = \'Fill the form properly\'\n    else:\n        response.flash=\'Edit the form as per your choice\'\n    return dict(form=form,imgid=imgid)\n\ndef manage():\n    grid=SQLFORM.grid(db.image,paginate=10)\n    return locals()\n\ndef user():\n    return dict(form=auth())\n\n@cache.action()\ndef download():\n    return response.download(request,db)\n\ndef call():\n    return service()\n\ndef test():\n    return "hi"\n\nresponse._vars=response._caller(image_selector)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/deepanshu/Documents/IT Swag/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/deepanshu/Documents/IT Swag/web2py/applications/newp/controllers/default.py", line 210, in <module>\n  File "/home/deepanshu/Documents/IT Swag/web2py/gluon/globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/deepanshu/Documents/IT Swag/web2py/applications/newp/controllers/default.py", line 72, in image_selector\n    selected = [m for m in images if m.startswith(img_start)]\n  File "/home/deepanshu/Documents/IT Swag/web2py/gluon/packages/dal/pydal/objects.py", line 90, in __getattr__\n    raise AttributeError\nAttributeError\n'
p11
s.