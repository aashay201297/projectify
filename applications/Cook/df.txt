# -*- coding: utf-8 -*-
# this file is released under public domain and you can use without limitations

#########################################################################
## This is a sample controller
## - index is the default action of any application
## - user is required for authentication and authorization
## - download is for downloading files uploaded in the db (does streaming)
#########################################################################


'''
def register():

	form=SQLFORM(db.registered)
	form2=SQLFORM(db.recipies)

	#form2=FORM(INPUT(_type='string',_name="Retype Password",IS_EQUAL_TO( )
	if form.process().accepted:
		response.flash="You are now a registered user!"
	elif form.errors:
		response.flash="Form has errors"
	else:
		response.flash = "Please fill out the form"
	return dict(form=form,form2=form2)
#def homepage():
'''
def find():
	
	rows=db(db.registered.First_Name).select()
#	for i in rows:
#		print i.First_Name
	return locals()

#def recent():
'''	
def index():
    """
    example action using the internationalization operator T and flash
    rendered by views/default/index.html or views/generic.html

    if you need a simple wiki simply replace the two lines below with:
    return auth.wiki()
    """
    response.flash = T("Hello World")
    return dict(message=T('Welcome to web2py!'))
'''
def index():
    images = db().select(db.image.ALL, orderby=db.image.title)
    return dict(images=images)


def user():
    """
    exposes:
    http://..../[app]/default/user/login
    http://..../[app]/default/user/logout
    http://..../[app]/default/user/register
    http://..../[app]/default/user/profile
    http://..../[app]/default/user/retrieve_password
    http://..../[app]/default/user/change_password
    http://..../[app]/default/user/bulk_register
    use @auth.requires_login()
        @auth.requires_membership('group name')
        @auth.requires_permission('read','table name',record_id)
    to decorate functions that need access control
    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users
    """
    return dict(form=auth())


@cache.action()
def download():
    """
    allows downloading of uploaded files
    http://..../[app]/default/download/[filename]
    """
    return response.download(request, db)


def call():
    """
    exposes services. for example:
    http://..../[app]/default/call/jsonrpc
    decorate with @services.jsonrpc the functions to expose
    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv
    """
    return service()


